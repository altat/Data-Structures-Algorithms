Sun Oct 20 18:43:34 PDT 2019

*** compiling with clang++ to create an executable called myprogram
clang version 3.8.1-24 (tags/RELEASE_381/final)
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin

*** running clang-tidy using options from .clang-tidy
LLVM (http://llvm.org/):
  LLVM version 3.8.1
  
  Optimized build.
  Built Jun  2 2017 (13:11:29).
  Default target: x86_64-pc-linux-gnu
  Host CPU: ivybridge
19215 warnings generated.
29554 warnings generated.
Suppressed 29554 warnings (29554 in non-user code).
Use -header-filter=.* to display errors from all non-system headers.

*** running myprogram
Starting testPisan01
* Testing == and !=
Ending testPisan01
Starting testPisan02
* Testing == and != with more detail
Ending testPisan02
Starting testPisan03
* Testing traversal
Visual check B1:
                x
            g
        f
    c
        a

            ___________c____________            
      _____a______            _____f______      
   __N___      __N___      __N___      __g___   
  N     N     N     N     N     N     N     x   

Ending testPisan03
Starting testSample01
Ending testSample01
Starting testTatla01
* Testing constructors
Testing Array Constructor
Testing Copy Constructor
* Testing clear
Visual check B2:

[__]
Ending testTatla01
Starting testTatla02
* Testing getHeight and numberOfNodes
Visual check B1:
                15
            14
                13
        12
                11
            10
                9
    8
                7
            6
                5
        4
                3
            2
                1

            ___________8____________            
      _____4______            _____12_____      
   __2___      __6___      __10__      __14__   
  1     3     5     7     9     11    13    15  

* Testing remove
Visual check B1 after remove 15,14,8,1,3,2,4:
            13
        12
                11
            10
    9
            7
        6
            5

            ___________9____________            
      _____6______            _____12_____      
   __5___      __7___      __10__      __13__   
  N     N     N     N     N     11    N     N   

* Testing add duplicates
Ending testTatla02
Starting testTatla03
* Testing contains
* Testing rebalance
Visual check B1 before rebalance:
                15
            14
        13
                11
            10
                9
    8

            ___________8____________            
      _____N______            _____13_____      
   __N___      __N___      __10__      __14__   
  N     N     N     N     9     11    N     15  

Visual check B1 after rebalance:
            15
        14
            13
    11
            10
        9
            8

      _____11_____      
   __9___      __14__   
  8     10    13    15  

Visual check B2 before rebalance:
                    5
                4
            3
        2
    1

                        _______________________1________________________                        
            ___________N____________                        ___________2____________            
      _____N______            _____N______            _____N______            _____3______      
   __N___      __N___      __N___      __N___      __N___      __N___      __N___      __4___   
  N     N     N     N     N     N     N     N     N     N     N     N     N     N     N     5   

Visual check B2 after rebalance:
            5
        4
    3
            2
        1

      _____3______      
   __1___      __4___   
  N     2     N     5   

Ending testTatla03
Done!

*** running with valgrind
==3796== Memcheck, a memory error detector
==3796== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3796== Using Valgrind-3.12.0.SVN and LibVEX; rerun with -h for copyright info
==3796== Command: ./myprogram
==3796== 
Starting testPisan01
* Testing == and !=
Ending testPisan01
Starting testPisan02
* Testing == and != with more detail
Ending testPisan02
Starting testPisan03
* Testing traversal
Visual check B1:
                x
            g
        f
    c
        a

            ___________c____________            
      _____a______            _____f______      
   __N___      __N___      __N___      __g___   
  N     N     N     N     N     N     N     x   

Ending testPisan03
Starting testSample01
Ending testSample01
Starting testTatla01
* Testing constructors
Testing Array Constructor
Testing Copy Constructor
* Testing clear
Visual check B2:

[__]
Ending testTatla01
Starting testTatla02
* Testing getHeight and numberOfNodes
Visual check B1:
                15
            14
                13
        12
                11
            10
                9
    8
                7
            6
                5
        4
                3
            2
                1

            ___________8____________            
      _____4______            _____12_____      
   __2___      __6___      __10__      __14__   
  1     3     5     7     9     11    13    15  

* Testing remove
Visual check B1 after remove 15,14,8,1,3,2,4:
            13
        12
                11
            10
    9
            7
        6
            5

            ___________9____________            
      _____6______            _____12_____      
   __5___      __7___      __10__      __13__   
  N     N     N     N     N     11    N     N   

* Testing add duplicates
Ending testTatla02
Starting testTatla03
* Testing contains
* Testing rebalance
Visual check B1 before rebalance:
                15
            14
        13
                11
            10
                9
    8

            ___________8____________            
      _____N______            _____13_____      
   __N___      __N___      __10__      __14__   
  N     N     N     N     9     11    N     15  

Visual check B1 after rebalance:
            15
        14
            13
    11
            10
        9
            8

      _____11_____      
   __9___      __14__   
  8     10    13    15  

Visual check B2 before rebalance:
                    5
                4
            3
        2
    1

                        _______________________1________________________                        
            ___________N____________                        ___________2____________            
      _____N______            _____N______            _____N______            _____3______      
   __N___      __N___      __N___      __N___      __N___      __N___      __N___      __4___   
  N     N     N     N     N     N     N     N     N     N     N     N     N     N     N     5   

Visual check B2 after rebalance:
            5
        4
    3
            2
        1

      _____3______      
   __1___      __4___   
  N     2     N     5   

Ending testTatla03
Done!
==3796== 
==3796== HEAP SUMMARY:
==3796==     in use at exit: 0 bytes in 0 blocks
==3796==   total heap usage: 212 allocs, 212 frees, 116,441 bytes allocated
==3796== 
==3796== All heap blocks were freed -- no leaks are possible
==3796== 
==3796== For counts of detected and suppressed errors, rerun with: -v
==3796== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
*** cleaning up, deleting myprogram
Sun Oct 20 18:43:42 PDT 2019
